"""
Kivy Image Editor Application

A complete image editing application built with Kivy for the GUI and Pillow for image processing.
Features include loading images, applying various filters and effects, undo functionality, and saving.

Author: Generated by AI Assistant
"""

import os
from kivy.app import App
from kivy.lang import Builder
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.popup import Popup
from kivy.uix.label import Label
from kivy.core.image import Image as CoreImage
from kivy.graphics.texture import Texture
from kivy.properties import BooleanProperty
from kivy.clock import Clock
import io

from image_processor import ImageProcessor

# Load the KV file explicitly
Builder.load_file('imagedit.kv')


class LoadDialog(BoxLayout):
    """File dialog for loading images."""
    
    def __init__(self, load_callback, cancel_callback, **kwargs):
        super().__init__(**kwargs)
        self.load_callback = load_callback
        self.cancel_callback = cancel_callback
    
    def load(self, path, filename):
        """Handle image loading from file dialog."""
        if filename:
            full_path = os.path.join(path, filename[0])
            self.load_callback(full_path)
        self.cancel()
    
    def cancel(self):
        """Cancel the file dialog."""
        self.cancel_callback()


class SaveDialog(BoxLayout):
    """File dialog for saving images."""
    
    def __init__(self, save_callback, cancel_callback, **kwargs):
        super().__init__(**kwargs)
        self.save_callback = save_callback
        self.cancel_callback = cancel_callback
    
    def save(self, path, filename):
        """Handle image saving from file dialog."""
        if filename:
            full_path = os.path.join(path, filename)
            self.save_callback(full_path)
        self.cancel()
    
    def cancel(self):
        """Cancel the file dialog."""
        self.cancel_callback()


class ImageEditorApp(BoxLayout):
    """Main application widget that contains all UI elements and handles user interactions."""
    
    # Observable properties for UI state management
    has_image = BooleanProperty(False)
    can_undo = BooleanProperty(False)
    
    def __init__(self, **kwargs):
        # Initialize the image processor BEFORE calling super().__init__()
        # This ensures it exists when the KV file is applied
        self.processor = ImageProcessor()
        
        super().__init__(**kwargs)
        
        # Reference to the image display widget (set after KV loading)
        self.image_display = None
        
        # Store original image state for slider resets
        self.original_brightness = 1.0
        self.original_contrast = 1.0
        self.current_brightness = 1.0
        self.current_contrast = 1.0
        
        # Debouncing for smooth slider updates
        self.update_event = None
    
    def on_kv_post(self, base_widget):
        """Called after KV file is loaded. Sets up references to UI elements."""
        self.image_display = self.ids.image_display
    
    def show_popup(self, title: str, message: str, popup_type: str = "info"):
        """
        Display a modern styled popup message to the user.
        
        Args:
            title: Popup window title
            message: Message content
            popup_type: Type of popup ('info', 'error', 'success', 'warning')
        """
        # Color scheme based on popup type
        color_schemes = {
            'info': (0.2, 0.6, 0.8, 1),
            'error': (0.8, 0.2, 0.2, 1),
            'success': (0.3, 0.7, 0.3, 1),
            'warning': (0.8, 0.6, 0.2, 1)
        }
        
        color = color_schemes.get(popup_type, color_schemes['info'])
        
        # Create content layout
        content = BoxLayout(orientation='vertical', spacing=15, padding=20)
        
        # Message label
        message_label = Label(
            text=message,
            text_size=(None, None),
            halign='center',
            valign='middle',
            font_size='16sp',
            color=(0.9, 0.9, 0.9, 1)
        )
        content.add_widget(message_label)
        
        # OK button
        from kivy.uix.button import Button
        ok_button = Button(
            text='OK',
            size_hint=(None, None),
            size=(100, 40),
            pos_hint={'center_x': 0.5}
        )
        
        # Style the button with canvas instructions
        with ok_button.canvas.before:
            from kivy.graphics import Color, RoundedRectangle
            Color(*color)
            ok_button.bg_rect = RoundedRectangle(
                pos=ok_button.pos,
                size=ok_button.size,
                radius=[8, 8, 8, 8]
            )
        
        def update_bg(*args):
            ok_button.bg_rect.pos = ok_button.pos
            ok_button.bg_rect.size = ok_button.size
        
        ok_button.bind(pos=update_bg, size=update_bg)
        
        content.add_widget(ok_button)
        
        popup = Popup(
            title=title,
            content=content,
            size_hint=(0.4, 0.3),
            background_color=(0.1, 0.1, 0.1, 0.9),
            title_color=(0.9, 0.9, 0.9, 1),
            title_size='18sp'
        )
        
        ok_button.bind(on_press=popup.dismiss)
        popup.open()
    
    def update_ui_state(self):
        """Update UI state properties to reflect current processor state."""
        self.has_image = self.processor.has_image()
        self.can_undo = self.processor.can_undo()
    
    def update_image_display(self):
        """
        Update the Kivy Image widget with the current processed image.
        This converts Pillow Image to Kivy Texture for display.
        """
        if not self.processor.has_image():
            return
        
        # Make sure image_display widget exists
        if not hasattr(self, 'image_display') or self.image_display is None:
            # Try to get it from ids if not set yet
            if hasattr(self, 'ids') and 'image_display' in self.ids:
                self.image_display = self.ids.image_display
            else:
                return  # Widget not ready yet
        
        # Get image data from processor
        image_data = self.processor.get_image_data()
        if not image_data:
            return
        
        try:
            # Create Kivy texture from image data
            # This is the key conversion: Pillow Image -> bytes -> Kivy Texture
            data_io = io.BytesIO(image_data)
            core_image = CoreImage(data_io, ext='png')
            
            # Verify core_image was created successfully
            if core_image and hasattr(core_image, 'texture') and core_image.texture:
                # Update the image display widget
                self.image_display.texture = core_image.texture
                
                # Update UI state for button states
                self.update_ui_state()
            else:
                self.show_popup("Error", "Failed to create image texture for display.", "error")
        except Exception as e:
            self.show_popup("Error", f"Error updating image display: {str(e)}", "error")
    
    def open_image(self):
        """Open file dialog to load an image."""
        content = LoadDialog(self.load_image_file, self.dismiss_load_dialog)
        self._load_popup = Popup(
            title="Load Image",
            content=content,
            size_hint=(0.9, 0.9)
        )
        self._load_popup.open()
    
    def load_image_file(self, filepath: str):
        """
        Load an image file using the image processor.
        
        Args:
            filepath: Path to the image file
        """
        try:
            if self.processor.load_image(filepath):
                self.reset_sliders()  # Reset sliders to default values
                self.update_image_display()
                self.update_ui_state()  # Ensure UI state is updated
                # No popup needed - visual feedback is sufficient
            else:
                self.show_popup("Error", "Failed to load image. Please check the file format.", "error")
        except Exception as e:
            self.show_popup("Error", f"Error loading image: {str(e)}", "error")
    
    def save_image(self):
        """Open file dialog to save the current image."""
        if not self.processor.has_image():
            self.show_popup("Warning", "No image loaded to save.", "warning")
            return
        
        content = SaveDialog(self.save_image_file, self.dismiss_save_dialog)
        self._save_popup = Popup(
            title="Save Image As",
            content=content,
            size_hint=(0.9, 0.9)
        )
        self._save_popup.open()
    
    def save_image_file(self, filepath: str):
        """
        Save the current image to a file.
        
        Args:
            filepath: Destination file path
        """
        try:
            if self.processor.save_image(filepath):
                self.show_popup("Success", f"Image saved: {os.path.basename(filepath)}", "success")
            else:
                self.show_popup("Error", "Failed to save image.", "error")
        except Exception as e:
            self.show_popup("Error", f"Error saving image: {str(e)}", "error")
    
    def check_image_loaded(self) -> bool:
        """
        Check if an image is loaded and show warning if not.
        
        Returns:
            True if image is loaded, False otherwise
        """
        if not self.processor.has_image():
            self.show_popup("Warning", "Please load an image first.", "warning")
            return False
        return True
    
    # Image processing operations
    
    def undo_operation(self):
        """Undo the last image operation."""
        if self.processor.undo():
            self.update_image_display()
            self.update_ui_state()
            # No popup needed for undo - visual feedback is sufficient
        else:
            self.show_popup("Info", "No operation to undo.", "info")
    
    def rotate_image(self):
        """Rotate image 90 degrees clockwise."""
        if self.check_image_loaded():
            self.processor.rotate_clockwise()
            self.update_image_display()
    
    def convert_grayscale(self):
        """Convert image to grayscale."""
        if self.check_image_loaded():
            self.processor.convert_to_grayscale()
            self.update_image_display()
    
    def apply_blur(self):
        """Apply Gaussian blur to the image."""
        if self.check_image_loaded():
            self.processor.apply_gaussian_blur(2.0)
            self.update_image_display()
    
    def flip_horizontal(self):
        """Flip image horizontally."""
        if self.check_image_loaded():
            self.processor.flip_horizontal()
            self.update_image_display()
    
    def flip_vertical(self):
        """Flip image vertically."""
        if self.check_image_loaded():
            self.processor.flip_vertical()
            self.update_image_display()

    def dismiss_load_dialog(self):
        """Callback function to dismiss the load dialog."""
        if hasattr(self, '_load_popup'):
            self._load_popup.dismiss()

    def dismiss_save_dialog(self):
        """Callback function to dismiss the save dialog."""
        if hasattr(self, '_save_popup'):
            self._save_popup.dismiss()

    def reset_sliders(self):
        """Reset brightness and contrast sliders to default values."""
        if hasattr(self, 'ids'):
            if 'brightness_slider' in self.ids:
                self.ids.brightness_slider.value = 1.0
            if 'contrast_slider' in self.ids:
                self.ids.contrast_slider.value = 1.0
            if 'brightness_value' in self.ids:
                self.ids.brightness_value.text = '1.0'
            if 'contrast_value' in self.ids:
                self.ids.contrast_value.text = '1.0'
        
        self.current_brightness = 1.0
        self.current_contrast = 1.0
    
    def update_slider_labels(self):
        """Update the slider value labels."""
        if hasattr(self, 'ids'):
            if 'brightness_value' in self.ids:
                self.ids.brightness_value.text = f'{self.current_brightness:.2f}'
            if 'contrast_value' in self.ids:
                self.ids.contrast_value.text = f'{self.current_contrast:.2f}'
    
    def schedule_image_update(self, dt=None):
        """Scheduled method to update the image after a short delay."""
        if self.processor.has_image():
            self.processor.adjust_brightness_and_contrast_absolute(
                self.current_brightness, 
                self.current_contrast
            )
            self.update_image_display()
    
    def on_brightness_change(self, value):
        """Handle brightness slider value changes with debouncing."""
        if not self.processor.has_image():
            return
        
        # Update current brightness value
        self.current_brightness = value
        self.update_slider_labels()
        
        # Cancel previous update if it exists
        if self.update_event:
            self.update_event.cancel()
        
        # Schedule new update with small delay for smoothness
        self.update_event = Clock.schedule_once(self.schedule_image_update, 0.05)
    
    def on_contrast_change(self, value):
        """Handle contrast slider value changes with debouncing."""
        if not self.processor.has_image():
            return
        
        # Update current contrast value
        self.current_contrast = value
        self.update_slider_labels()
        
        # Cancel previous update if it exists
        if self.update_event:
            self.update_event.cancel()
        
        # Schedule new update with small delay for smoothness
        self.update_event = Clock.schedule_once(self.schedule_image_update, 0.05)

    def reset_adjustments(self):
        """Reset brightness and contrast adjustments to default values."""
        if self.processor.has_image():
            # Reset to original image
            self.processor.reset_to_original()
            
            # Reset slider values
            self.current_brightness = 1.0
            self.current_contrast = 1.0
            
            # Update UI
            if hasattr(self, 'ids'):
                if 'brightness_slider' in self.ids:
                    self.ids.brightness_slider.value = 1.0
                if 'contrast_slider' in self.ids:
                    self.ids.contrast_slider.value = 1.0
            
            self.update_slider_labels()
            self.update_image_display()

    def get_image_info(self):
        """Get formatted image information for display."""
        if self.processor.has_image():
            size = self.processor.get_image_size()
            if size:
                return f"Size: {size[0]}×{size[1]} pixels"
        return "Ready for editing"


class ImageEditorKivyApp(App):
    """Main Kivy application class."""
    
    def build(self):
        """Build and return the root widget."""
        self.title = "Image Editor - Photo Enhancement Suite"
        return ImageEditorApp()


def main():
    """Main entry point for the application."""
    ImageEditorKivyApp().run()


if __name__ == "__main__":
    main()
